25.06.13
- bash를 활용해 JSON Server 등으로 간이 모의 API 만들기 

1. 프론트단에서 더미(dummy) 응답 사용하기
가장 손쉬운 방법은 classifyEmotion 함수를 당분간 더미 응답을 반환하도록 바꿔 두는 거예요. 예를 들어:

js
// src/api/emotionApi.js

// 실제 API 호출 대신, 1초 딜레이 후 더미 데이터 반환
export async function classifyEmotion(file) {
  await new Promise((r) => setTimeout(r, 1000));
  // 랜덤으로 감정 하나 뽑기
  const emotions = ['happy','sad','surprised','angry'];
  const emotion = emotions[Math.floor(Math.random()*emotions.length)];
  return { emotion, confidence: Math.random().toFixed(2) };
}
이렇게 해두면, 프론트엔드 로직(업로드 버튼 → 분류 → 화면 업데이트) 전체 흐름을 CORS 없이 테스트할 수 있습니다.

2. JSON Server 등으로 간이 모의 API 만들기
JSON Server 같은 툴을 이용하면, 간단한 JSON 파일을 백엔드처럼 띄워 줄 수 있어요.

프로젝트 루트에서 설치

bash
npm install -g json-server
db.json 생성

jsonc
{
  "classify": [
    { "emotion": "happy", "confidence": 0.92 }
  ]
}
서버 띄우기

bash
json-server --watch db.json --port 4000
프론트에서 /classify POST 대신 GET으로 호출하거나, json-server 라우팅 리마핑 기능을 써서 POST도 받을 수 있어요.

3. 간단한 Express 스텁 서버 만들기
백엔드가 Express라면, 최소한의 “분류” 엔드포인트만 갖춘 스텁을 로컬에 빠르게 띄울 수 있습니다:

bash
mkdir stub-backend && cd stub-backend
npm init -y
npm install express cors

js
// stub-backend/index.js
import express from 'express';
import cors from 'cors';

const app = express();
app.use(cors());
app.use(express.json());
app.post('/classify', (req, res) => {
    // 실제 분류 로직 대신 매번 같은 더미 반환
    res.json({ emotion: 'happy', confidence: 0.95 });
});
app.listen(4000, () => console.log('Stub API running on http://localhost:4000'));

bash
# 실행
node index.js
이제 프론트에서는 proxy나 setupProxy.js를 통해 localhost:4000으로 연결하면 되고, 실제 백엔드 개발이 완료되면 로직만 바꾸면 됩니다.

